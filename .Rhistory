course[[1]]<-T
course_update<-course
course_update
course_update[[2]]$`teacher`<-"紀學檜"
course_update2<-course_update
course_update2
course_update[[2]]$`teacher`<-"紀學檜"
course_update2<-course_update
str (course_update2)
course[[2]]$time_place->time_place
time_place
course[[2]][[2]]<-"選"
course[[1]]<-T
course_update<-course
course_update
course_update[[2]]$`teacher`<-"紀學檜"
course_update2<-course_update
str (course_update2)
knitr::opts_chunk$set(echo = TRUE)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b
# 相當於
c(2%%4, 3%%(-1), 5%%3)
a ** b
5*c(1,3,4)+7
# 其實是
c(5)*c(1,3,4)+c(7)
## 對向量5，向量7進行recycle:
c(5,5,5)*c(1,3,4)+c(7,7,7)
## Recycle等長後才進行elementwise operation:
c(5*1+7, 5*3+7, 5*4+7)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
paste0(
c("我叫"), c("小明","小美")
)
paste0(
c("我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
pick_above170 <- example$height >= 170 #身高大於等於170
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
pick_above170 <- example$height >= 170 #身高大於等於170
example$height
c(175, 166, 170, 160) >= 170
example$name[pick_above170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆2年級人數
table(transcript100to103$`學屆`)
# 各學屆2年級成績大於85年數
table(transcript100to103$`學屆`[pick_above85])
# 各學屆2年級人數
table(transcript100to103$`學屆`)
# 各學屆2年級成績大於85人數
pick_above85 <-
transcript100to103$`成績` > 85# 只要成績大於85的
table(transcript100to103$`學屆`[pick_above85])
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$`期間` >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_`小新` <- example$name == "小新"
pick_"小新" <- example$name == "小新"
`pick_小新` <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
`pick_小新` <- example$name == "小新"
data_selected <-
list(
name=example$name[`pick_小新`],
weight=example$weight[`pick_小新`],
height=example$height[`pick_小新`],
hobby=example$hobby[`pick_小新`],
residence=example$residence[`pick_小新`],
allowance=example$allowance[`pick_小新`],
bloodType=example$bloodType[`pick_小新`]
)
example[[1]][pick_小新]
example[[2]][pick_小新]
example[[3]][pick_小新]
example[[4]][pick_小新]
example[[5]][pick_小新]
example[[6]][pick_小新]
example[[7]][pick_小新]
example[[1]][pick_小新]
example[[2]][pick_小新]
example[[3]][pick_小新]
example[[4]][pick_小新]
example[[5]][pick_小新]
example[[6]][pick_小新]
example[[7]][pick_小新]
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
Sys.getenv() -> envSys
file.path(envSys[names(envSys)=='R_HOME'],'etc',"Rconsole") -> filename_rconsole
file.path(envSys[names(envSys)=='R_HOME'],'etc',"Rprofile.site") -> filename_rprofile
file.edit(filename_rconsole)
cat('Your Rconsole is at\n', filename_rconsole,'\n')
file.edit(filename_rprofile)
cat('Your Rprofile.site is at\n', filename_rprofile,'\n')
library(stringr)
library(glue)
knitr::opts_chunk$set(echo = TRUE)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
str(transcript100to103)
#呼叫前面用的資料
unique(transcript100to103$學院)
setlawbusiness<-c("法學院","商學院")
picklawbusiness<-transcript100to103$學院%in%setlawbusiness
setlawbusiness<-c("法學院","商學院")
picklawbusiness<-transcript100to103$學院 %in% setlawbusiness
setlawbusiness<-c("法學院","商學院")
picklawbusiness<-transcript100to103$學院 %in% setlawbusiness
transcript100to103$學院[setlawbusiness]
setlawbusiness<-c("法學院","商學院")
picklawbusiness<-transcript100to103$`學院` %in% setlawbusiness
transcript100to103$`學院`[setlawbusiness]
#呼叫前面用的資料
#unique會顯示一個向量內獨一無二的資料種類
unique(transcript100to103$`學院`)
setlawbusiness<-c("法學院","商學院")
picklawbusiness<-transcript100to103$`學院` %in% setlawbusiness
transcript100to103$`學院`[setlawbusiness]
setlawbusiness<-c("法學院","商學院")
picklawbusiness<-transcript100to103$`學院` %in% setlawbusiness
setlawbusiness<-c("法學院","商學院")
picklawbusiness<-transcript100to103$`學院` %in% setlawbusiness
picklawbusiness
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
#class是以你可以對它進行什麼樣的操作來分的
knitr::opts_chunk$set(echo = TRUE)
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
library(stringr)
library(glue)
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
install.packages("htmlwidgets")
library("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
strip1 <- strip2 <- strip3 <- "[0-9]"
strip4 <- "號"
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
print(myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
factor1
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
#factor(目前的factor向量, levels=自訂排序)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
#factor(目前的factor向量, levels=自訂排序)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
#levels(x) <-
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
#也可改levels其中幾個利用元素取代概念
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
