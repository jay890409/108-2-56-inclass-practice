name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
str(listExample)
listExample[[1]]
listExample[[2]]
listExample[[1]]
listExample[[2]]
str(listExample)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 # 學期拿出來，有2個元素的list
str(get1, max.level = 1)
get1 # 學期拿出來，有2個元素的list
str(get1)
get2 # listExample 只留下學期元素，是個只有一個元素的list
str(get2, max.level = 2)
get2 # listExample 只留下學期元素，是個只有一個元素的list
str(get2)
get1$`108-1`->get1_layer1;get1_layer1
get1$`108-1`->get1_layer1
str(get1_layer1)
get1_layer1[[1]]->get1_layer2
str(get1_layer2)
get1_layer2$`teacher`
get1_layer2$`teacher`
listExample[["學期"]]$`108-1`[[1]]$teacher
get2_layer1<-get2[[1]]
get2_layer2<-get2_layer1[["108-1"]]
get2_layer3<-get2_layer2[[1]]
get2_layer3$teacher
#today <- list(
# list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
#  list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
#tomorrow <- list(
#  list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
#  list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
#weather <- list(today,tomorrow)
#str(weather)
#這裡的命名法很差，再取物時完全用不上，所以要改成:
today <- list(
list("台北市",highest_temp=c(highest_temp = 25),lowest_temp=c(lowest_temp = 18)),
list("新北市",highest_temp=c(highest_temp = 24),lowest_temp=c(lowest_temp = 15)))
tomorrow <- list(
list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
#today <- list(
# list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
#  list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
#tomorrow <- list(
#  list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
#  list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
#weather <- list(today,tomorrow)
#str(weather)
#這裡的命名法很差，再取物時完全用不上，所以要改成:
today <- list(
list("台北市",highest_temp=c(highest_temp = 25),lowest_temp=c(lowest_temp = 18)),
list("新北市",highest_temp=c(highest_temp = 24),lowest_temp=c(lowest_temp = 15)))
tomorrow <- list(
list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
today[[1]]$`highest_temp`
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
a[[7]]<-"Johnson"
a
a<-c(a,("mary"))
a<-c(a,("mary"))
a
a<-c(a,("mary"))
a<-c(a,("mary"))
a<-c(a,("mary"))
a
a<-c(a,("mary"))
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
#practice
a[[7]]<-"Johnson"
a
a<-c(a,("mary"))
a
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
# 新增資料
list1[[2]] <- list(
name="Mary",
birthday=ymd("1998-08-24")
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
# 新增資料
list1[[2]] <- list(
name="Mary",
birthday=ymd("1998-08-24")
)
list1[[2]]$status <- c(height=163, weight=45)
list1[[1]]$status[["height"]] <- 176
str(list1)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
# 新增資料
list1[[2]] <- list(
name="Mary",
birthday=ymd("1998-08-24")
)
list1[[2]]$status <- c(height=163, weight=45)
list1[[1]]$status[["height"]] <- 176
str(list1)
list1[[1]][["age"]] <- 21
list1[[2]]["age"] <- list(21)
# 改變「一個」時，使用[[ ]]比較不會錯。
str(list1)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)
str(list1)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
str(listExample)
listExample[[2]][[1]][[2]]<-list(name="產業經濟學",teacher="Wen",grade=88)
str(listExample)
str(listExample)
# 108-1新增一科目成績
listExample$學期$`108-1`[[2]] <-
list(name="產業經濟學")
str(listExample)
listExample$學期$`108-1`[[2]][c("teacher","grade")] <-
list(
"Wen",
88
)
str(listExample)
listExample[[2]][[1]][[2]]<-list(name="產業經濟學",teacher="Wen",grade=88)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
str(listExample)
listExample[[2]][[1]][[2]]<-list(name="產業經濟學",teacher="Wen",grade=88)
str(listExample)
str(listExample)
# 108-1新增一科目成績
listExample$學期$`108-1`[[2]] <-
list(name="產業經濟學")
str(listExample)
listExample$學期$`108-1`[[2]][c("teacher","grade")] <-
list(
"Wen",
88
)
str(listExample)
str(listExample)
# 108-1新增一科目成績
listExample$學期$`108-1`[[2]] <-
list(name="產業經濟學")
listExample$學期$`108-1`[[2]][c("teacher","grade")] <-
list(
"Wen",
88
)
str(listExample)
str(listExample)
# 108-1新增一科目成績
listExample$`學期`$`108-1`[[2]] <-
list(name="產業經濟學")
listExample$`學期`$`108-1`[[2]][c("teacher","grade")] <-
list(
"Wen",
88
)
str(listExample)
str(listExample)
# 108-1新增一科目成績
listExample$`學期`$`108-1`[[2]] <-
list(name="產業經濟學")
listExample$`學期`$`108-1`[[2]][c("teacher","grade")] <-
list(
"Wen",
88
)
str(listExample)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
str(listExample)
listExample[[2]][[1]][[2]]<-list(name="產業經濟學",teacher="Wen",grade=88)
str(listExample)
listExample[[2]][[1]][[2]]<-list(name="產業經濟學",teacher="Wen",grade=88)
str(listExample)
print(a)
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
#practice
a[[7]]<-"Johnson"
a
a<-c(a,("mary"))
a
print(a)
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a # 要回存才算真的刪除
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
),
list(
name="Mary",
birthday=ymd("1998-08-24"),
status=c(height=163, weight=45),
age=21,
bloodType="AB"
)
)
str(list1)
knitr::opts_chunk$set(echo = TRUE)
list[[1]][-c(3)]->list1[[1]]
str(list1)
list1[[1]][-3] -> list1[[1]] # 小心回存的位置
list1[[2]][-c(4,5)] -> list1[[2]]
str(list1)
list1[[1]][-c(3)] -> list1[[1]] # 小心回存的位置
list1[[2]][-c(4,5)] -> list1[[2]]
str(list1)
list1[[2]][c(1,2)] <- NULL
str(list1)
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
two_times<-c(ymd_hms(taiwan_time),dmy_hms(oslo_time))
course<-list(approve=T,
course_info=list(coursename="會計學",type="必",credits=3,time_place=list(list(weekday="星期三",time_slots=c(7,8,9),classroom="商2F05")
)
)
)
course
course[[2]][[4]][[1]][[1]]<-list("星期三","星期二")
course[[2]][[4]][[1]][[2]]<-list(c(7,8),5)
courseUpdate<-course
courseUpdate
course[[2]][[4]][[1]][[1]]<-list("星期三","星期二")
course[[2]][[4]][[1]][[2]]<-list(c(7,8),5)
courseUpdate<-course
str(courseUpdate)
levels_fiveReceipts<-levels(fiveReceipts)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
levels_fiveReceipts<-levels(fiveReceipts)
levels_fiveReceipts
chr_fiveReceipts<-as.character(fiveReceipts)
chr_fiveReceipts
storage_fiveReceipts<-as.integer(fiveReceipts)
storage_fiveReceipts
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
fiveReceipts
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
fiveReceipts
levels_fiveReceipts<-levels(fiveReceipts)
levels_fiveReceipts
storage_fiveReceipts<-as.integer(fiveReceipts)
storage_fiveReceipts
chr_fiveReceipts<-as.character(fiveReceipts)
chr_fiveReceipts
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite)
course_update[[2]]$`teacher`<-"紀學檜"
course[[2]][[2]]<-"選"
course[[1]]<-T
course_update<-course
course_update
course_update[[2]]$`teacher`<-"紀學檜"
course_update2<-course_update
course_update2
course_update[[2]]$`teacher`<-"紀學檜"
course_update2<-course_update
str (course_update2)
course[[2]]$time_place->time_place
time_place
course[[2]][[2]]<-"選"
course[[1]]<-T
course_update<-course
course_update
course_update[[2]]$`teacher`<-"紀學檜"
course_update2<-course_update
str (course_update2)
knitr::opts_chunk$set(echo = TRUE)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b
# 相當於
c(2%%4, 3%%(-1), 5%%3)
a ** b
5*c(1,3,4)+7
# 其實是
c(5)*c(1,3,4)+c(7)
## 對向量5，向量7進行recycle:
c(5,5,5)*c(1,3,4)+c(7,7,7)
## Recycle等長後才進行elementwise operation:
c(5*1+7, 5*3+7, 5*4+7)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
paste0(
c("我叫"), c("小明","小美")
)
paste0(
c("我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
pick_above170 <- example$height >= 170 #身高大於等於170
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
#example$name[c(T, F, T, F)] 取出身高大於170的(肉眼看，所以沒效率)
#用relational ops
str(example[c("name","height")])
pick_above170 <- example$height >= 170 #身高大於等於170
example$height
c(175, 166, 170, 160) >= 170
example$name[pick_above170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆2年級人數
table(transcript100to103$`學屆`)
# 各學屆2年級成績大於85年數
table(transcript100to103$`學屆`[pick_above85])
# 各學屆2年級人數
table(transcript100to103$`學屆`)
# 各學屆2年級成績大於85人數
pick_above85 <-
transcript100to103$`成績` > 85# 只要成績大於85的
table(transcript100to103$`學屆`[pick_above85])
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$`期間` >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
